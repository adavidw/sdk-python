# dist: precise
language: python

sudo: false

env:
#  - TEST_SUITE=samples
  - TEST_SUITE=coverage
python:
  - "2.7"
  # - "3.4"
  # - "3.5"
  - "3.6"
#  - "3.7-dev"
#  - "pypy"
#  - "pypy3"
  
# matrix:
#   fast_finish: true
#   allow_failures:
#     - python: "3.7-dev"
#       # 3.7-dev started crashing when building lxml although the neither the python version nor the lxml version seemed to change.
#       # Will have to investigate further.
#     - python: "pypy"
#     - python: "pypy3"
#       # pypy will just crash due to an incompatibility with lxml.
#       # Newer versions of pypy seem to crash also, so we probably have to fix with a newer version of lxml

before_install:
  # execute all of the commands which need to be executed 
  # before installing dependencies
  
install:
  # install all of the dependencies we need here
  # to run samples, we don't really need any of these, because setup.py will install what it needs.
  # However, may be more efficient to install nose, pyxb, and lxml first. But does coverage need them?
  - pip install unittest2
  - pip install nose
  - which nose
  - pip install coverage # I added this
  - pip install pyxb==1.2.5 # can't change the pyxb version without changing the version in setup.py
                            # and regenerating the bindings in apicontractsv1.py
#  - pip install lxml
  - pip install lxml==3.7.3
#  - if [[ "$TEST_SUITE" == "coverage" ]]; then pip install coveralls==1.1; fi

before_script:
  # execute all of the commands which need to be executed 
  # before running actual tests
  - git submodule update --remote --recursive

script:
  # execute all of the tests or other commands to determine
  # whether the build will pass or fail
  - python -c "import json, urllib2; print json.load(urllib2.urlopen('https://www.howsmyssl.com/a/check'))['tls_version']"
  - python3 -c "import json, urllib.request; print(json.loads(urllib.request.urlopen('https://www.howsmyssl.com/a/check').read().decode('UTF-8'))['tls_version'])"
#  - if [[ "$TEST_SUITE" == "coverage" ]]; then nosetests --with-coverage -cover-package=authorizenet; coveralls; fi
  - if [[ "$TEST_SUITE" == "coverage" ]]; then nosetests --with-coverage -cover-package=authorizenet; fi
  - if [[ "$TEST_SUITE" == "samples" ]]; then python setup.py install; cd sample-code-python; python ./test-runner.py; fi
